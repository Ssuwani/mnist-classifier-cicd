name: CD

# on:
#   workflow_run:
#     workflows: ["ci"]
#     branches: [main]
#     types:
#       - completed

on:
  repository_dispatch:
    types: [FINISH_TRAINING]
    #repository_dispatch가 발생할 때, 이 Action이 실행됩니다.
    #여기서 types란, 위에서 설명한 endpoint의 payload의 event_type입니다.
    #받는 쪽에서 지정한 특정 event_type을 가진 request가 있다면, 실행합니다.
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster-1 # TODO: update to cluster name
  GKE_ZONE: us-central1-a # TODO: update to cluster zone
  #   DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  BENTO_IMAGE: mnist_classifier_bentoml

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
          export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Tag with GITHUB SHA
        run: echo "TAG=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      # ------
      # - uses: actions-hub/gcloud@master
      #   env:
      #     PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      #     APPLICATION_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
      #   with:
      #     args: info
      # # Setup gcloud CLI
      # - uses: google-github-actions/setup-gcloud@v0.2.0
      #   with:
      #     service_account_key: ${{ secrets.GKE_SA_KEY }}
      #     project_id: ${{ secrets.GKE_PROJECT }}
      #     export_default_credentials: true
      # # Configure Docker to use the gcloud command-line tool as a credential
      # # helper for authentication
      # - run: |-
      #     gcloud --quiet auth configure-docker

      # # Get the GKE credentials so we can deploy to the cluster
      # - uses: google-github-actions/get-gke-credentials@v0.2.1
      #   with:
      #     cluster_name: ${{ env.GKE_CLUSTER }}
      #     location: ${{ env.GKE_ZONE }}
      #     credentials: ${{ secrets.GKE_SA_KEY }}
      # ------
      - name: Install dependencies
        run: python -m pip install bentoml tensorflow Pillow numpy==1.19.5

      - name: Wait until training job complete
        run: kubectl wait --for=condition=complete --timeout 24h -n mnist job/mnist-train-job-$TAG

      - name: Bento Packing
        run: python bentoml/bento_packer.py --model_path gs://suwan/mnist_$TAG

      - name: Set ENV with BentoML saved path
        run: echo "SAVED_PATH=$(bentoml get MnistService:latest --print-location --quiet)" >> $GITHUB_ENV

      - name: Build BentoML Model
        run: docker build -t gcr.io/$PROJECT_ID/$BENTO_IMAGE:$TAG $SAVED_PATH

      - name: Push BentoML Model
        run: docker push gcr.io/$PROJECT_ID/$BENTO_IMAGE:$TAG

      - name: Edit deployment yaml with SHA tag
        uses: mikefarah/yq@master
        with:
          cmd: IMAGE="gcr.io/abstract-flame-330901/$BENTO_IMAGE:$TAG" yq e -i '.spec.template.spec.containers[0].image = env(IMAGE)' deploy/deployment.yaml
      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Edit image tag" -a
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
    # - name: Build and Publish
    #   run: |
    #     echo 'EOF' >> $GITHUB_ENV

    # Build the Docker image
    # - name: Build
    #   run: |-
    #     docker build \
    #       --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       deploy_on_bentoml/train_linear/

    # Push the Docker image to Google Container Registry
    # - name: Publish
    #   run: |-
    #     docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # - name: Run Training Job
    #   run: |-
    #     kubectl apply -f deploy_on_bentoml/mnist_train_linear_job.yaml
#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize

#     # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#         ./kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
